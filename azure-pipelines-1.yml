# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Downloading SCA Resolver
    curl -L https://sca-downloads.s3.amazonaws.com/cli/1.9.10/ScaResolver-linux64.tar.gz -o ScaResolver-linux64.tar.gz
    tar -xvf ScaResolver-linux64.tar.gz
    rm ScaResolver-linux64.tar.gz
    chmod +x ScaResolver
    ls -l
    #mvn -version
    pwd
    docker ps
    echo Agent.BuildDirectory $(Agent.BuildDirectory) 
    echo Build.Repository.LocalPath $(Build.Repository.LocalPath) 
    echo Build.SourcesDirectory $(Build.SourcesDirectory) 
    echo Build.DefinitionName $(Build.DefinitionName) 
    echo Build.Repository.Name $(Build.Repository.Name) 
    echo Build.SourceBranch $(Build.SourceBranch) 
    echo Build.SourceBranchName $(Build.SourceBranchName) 
    echo System.JobName $(System.JobName) 
    
  displayName: 'SCA Resolver download'

- task: Application security testing@2022
  continueOnError: true
  inputs:
    projectName: 'WebGoat'
    enableProxy: false
    enableSastScan: false
    enableDependencyScan: true
    dependencyServerURL: 'CxSCA'
    scaTeam: 'CxServer/test'
    isEnableScaResolver: true
    pathToScaResolver: '$(Build.Repository.LocalPath)'
    scaResolverAddParameters: '-s $(Build.Repository.LocalPath) -n WebGoat -r $(Build.Repository.LocalPath)'



- script: |
    echo SCA Resolver Logs
    ls -al logs
    cat logs/*/*
  displayName: 'SCA Resolver Logs'